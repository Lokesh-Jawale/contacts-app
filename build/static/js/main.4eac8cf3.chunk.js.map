{"version":3,"sources":["features/contactSlice.js","components/Contact.js","components/Contacts.js","components/AddContact.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["contactSlice","createSlice","name","initialState","contactsData","currentContact","reducers","saveContact","state","action","payload","saveCurrentContact","actions","selectContactData","contacts","selectCurrentContact","Contact","email","address","phoneNumber","itemKey","dispatch","useDispatch","history","useHistory","isPresent","value","handleDelete","e","preventDefault","data","JSON","parse","localStorage","getItem","length","newData","filter","console","log","removeItem","setItem","stringify","className","IconButton","onClick","push","color","Contacts","useState","searchText","setSearchText","useSelector","includes","useEffect","error","type","placeholder","onChange","target","to","map","contact","AddContact","setName","setEmail","setAddress","setPhoneNumber","nameError","setNameError","emailError","setEmailError","addressError","setAddressError","phoneNumberError","setPhoneNumberError","htmlFor","maxLength","required","pattern","errorMessage","ok","Number","trim","isNaN","isValid","alert","temp","generatedKey","Date","getTime","App","path","exact","store","configureStore","reducer","contactsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4eac8cf3.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n    contactsData: [],\n    currentContact: null,\n}\n\nconst contactSlice = createSlice({\n    name: \"contacts\",\n    initialState,\n    reducers: {\n        saveContact(state, action){\n            state.contactsData = action.payload;\n        },\n        saveCurrentContact(state, action){\n            state.currentContact = action.payload;\n        }\n    }\n});\n\nexport const {\n    saveContact, saveCurrentContact\n} = contactSlice.actions\n\nexport const selectContactData = state => state.contacts.contactsData;\nexport const selectCurrentContact = state => state.contacts.currentContact;\n\nexport default contactSlice.reducer","import React from 'react';\nimport './Contact.css';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { IconButton } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useDispatch } from 'react-redux';\nimport { saveContact, saveCurrentContact } from '../features/contactSlice.js';\nimport { useHistory } from \"react-router-dom\";\n\nfunction Contact({ name, email, address, phoneNumber, itemKey }) {\n\n    const dispatch = useDispatch();\n    let history = useHistory();\n\n    const isPresent = (value) => {\n        return (value?.itemKey !== itemKey);\n    }\n\n    const handleDelete = (e) => {\n        e.preventDefault();\n        var data = JSON.parse(localStorage.getItem('contacts-data-list'));\n        if(data?.length) {\n            var newData = data?.filter(isPresent);\n            console.log(newData);\n            console.log(itemKey);\n            dispatch(saveContact(newData))\n            localStorage.removeItem('contacts-data-list');\n            localStorage.setItem('contacts-data-list', JSON.stringify(newData));\n        }\n    }\n\n    const handleEdit = (e) => {\n        e.preventDefault();\n        handleDelete(e);\n        dispatch(saveCurrentContact({\n            name: name,\n            email: email,\n            phoneNumber: phoneNumber,\n            address: address,\n            itemKey: itemKey,\n        }))\n        history.push(\"/addcontact\");\n    }\n\n    return (\n        <div className=\"contact\">\n            <div className=\"contact__info\">\n                <table>\n                    <tr>\n                        <td className=\"field\">Name</td>\n                        <td>{name}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"field\">Contact</td>\n                        <td>{phoneNumber}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"field\">Email-Id</td>\n                        <td>{email}</td>\n                    </tr>\n                    <tr>\n                        <td className=\"field\">Address</td>\n                        <td>{address}</td>\n                    </tr>\n                </table>\n            </div>\n\n            <div className=\"contact__edit\">\n                <IconButton className=\"icons\" onClick={handleEdit} >\n                    <EditIcon color=\"primary\"/>\n                </IconButton>\n                <IconButton className=\"icons\" onClick={handleDelete} >\n                    <DeleteIcon color=\"secondary\" />\n                </IconButton>\n            </div>\n        </div>\n    )\n}\n\nexport default Contact\n","import React, { useState, useEffect } from 'react';\nimport Contact from './Contact';\nimport './Contacts.css';\nimport { Link } from \"react-router-dom\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveContact, selectContactData } from '../features/contactSlice.js';\n\nfunction Contacts() {\n    const [searchText, setSearchText] = useState('');\n    const dispatch = useDispatch();\n    const contactsData = useSelector(selectContactData);\n\n    useEffect(() => {\n        try{\n            var data = JSON.parse(localStorage.getItem('contacts-data-list'));\n            dispatch(saveContact(data));\n        }\n        catch (error){\n            console.log(error)\n        }\n    }, [])\n\n    function isPresent(value) {\n        return ((value?.name.includes(searchText))\n            ||  value?.email.includes(searchText)\n            ||  value?.phoneNumber.includes(searchText)\n            ||  value?.address.includes(searchText));\n    }\n\n    useEffect(() => {\n        try{\n            var data = JSON.parse(localStorage.getItem('contacts-data-list'));\n            var newData= [];\n            if(data?.length) {\n                newData = data?.filter(isPresent);\n                dispatch(saveContact(newData));\n                console.log(newData);\n            }\n        }\n        catch (error){\n            console.log(error)\n        }\n    }, [searchText])\n\n    return (\n        <div className=\"contacts\">\n            <div className=\"contacts__header\">\n                <h2>Contacts List</h2>\n\n                <div className=\"contacts__searchbox\">\n                    <input \n                        type=\"search\" \n                        value={searchText}\n                        placeholder=\"Search any field ...\"\n                        onChange={e => setSearchText(e.target.value)}\n                    />\n                    <input className=\"search__button\" type=\"button\" value=\"Search\" />\n                </div>\n\n                <Link to=\"/addcontact\">\n                    <button className=\"addContact__button\">\n                        Add new contact\n                    </button>\n                </Link>\n            </div>\n            \n            <div className=\"contacts__container\">\n                {(contactsData) \n                    ? \n                    contactsData.map((contact) => (\n                        <Contact\n                            name= {contact?.name}\n                            address= {contact?.address}\n                            phoneNumber= {contact?.phoneNumber}\n                            email= {contact?.email}\n                            itemKey= {contact?.itemKey}\n                        />\n                    ))\n                    :\n                    <p className=\"empty\">There are no contacts to show</p>}\n            </div>\n\n        </div>\n    )\n}\n\nexport default Contacts\n","import React, { useState } from 'react';\nimport './AddContact.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { saveContact, saveCurrentContact, selectCurrentContact } from '../features/contactSlice.js';\nimport { useHistory } from \"react-router-dom\";\n\nfunction AddContact() {\n    const currentContact = useSelector(selectCurrentContact);\n    const [name, setName] = useState(currentContact?.name);\n    const [email, setEmail] = useState(currentContact?.email);\n    const [address, setAddress] = useState(currentContact?.address);\n    const [phoneNumber, setPhoneNumber] = useState(currentContact?.phoneNumber);\n\n    const [nameError, setNameError] = useState('');\n    const [emailError, setEmailError] = useState('');\n    const [addressError, setAddressError] = useState('');\n    const [phoneNumberError, setPhoneNumberError] = useState('');\n\n    const dispatch = useDispatch();\n    const history = useHistory();\n\n    const generateUniqueKey = (pre) => {\n        return `${ pre }_${ new Date().getTime() }`;\n    }\n\n    function isValid() {\n        const errorMessage = 'Error: This is mandatory field';\n        var ok= true;\n\n        if(!name) {\n            ok= false;\n            setNameError(errorMessage);\n        }\n        else setNameError('');\n\n        if(email?.length <= 10 || !(email?.includes('@gmail.com') || email?.includes('@yahoo.com'))){\n            ok=false;\n            if(!email) setEmailError(errorMessage);\n            else setEmailError(\"Please enter the email id in proper format. example: abc@gmail.com || abc@yahoo.com\");\n        }\n        else setEmailError('');\n\n        if(!address){\n            ok=false;\n            setAddressError(errorMessage);\n        }\n        else setAddressError('');\n\n        if(Number(phoneNumber?.trim()) < 7000000000 \n            || Number(phoneNumber?.trim()[0]) < 7\n            || isNaN(Number(phoneNumber?.trim()))){\n            ok=false;\n            if(!phoneNumber) setPhoneNumberError(errorMessage)\n            else setPhoneNumberError(\"Please enter the Phone number in proper format. example: 9786312456\");\n        }\n        else setPhoneNumberError('');\n\n        return ok;\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if(isValid()){\n            alert(\"Form Submitted Successfully\");\n            var data = [];\n            try {\n                var temp= JSON.parse(localStorage.getItem('contacts-data-list'));\n                if(temp?.length) data = temp;\n            } catch (error) {\n                alert(error.errorMessage);\n            }\n\n            const generatedKey = generateUniqueKey(name);\n            let newData = {\n                name: name,\n                email: email,\n                phoneNumber: phoneNumber,\n                address: address,\n                itemKey: generatedKey,\n            }\n            \n            data?.push(newData);\n            localStorage.setItem('contacts-data-list', JSON.stringify(data));\n            setName('');\n            setEmail('');\n            setPhoneNumber('');\n            setAddress('');\n\n            dispatch(saveCurrentContact(null));\n            history.push('/');\n        }\n    }\n\n    return (\n        <div className=\"addcontact\">\n            {(currentContact)? <h2>Edit Contact</h2>\n            :<h2>Add new contact</h2>}\n\n            {/* Add new contact form */}\n            <form className=\"form__container\">\n\n                <div className=\"form__inputs\">\n                    <label htmlFor=\"name\">Contact's Name</label>\n                    <input \n                        type=\"text\" \n                        maxLength=\"50\" \n                        name=\"name\"\n                        value={name}\n                        required\n                        onChange={e => setName(e.target.value)}\n                    />\n                    <p className=\"form__error\">{nameError}</p>\n                </div>\n                <div className=\"form__inputs\">\n                    <label htmlFor=\"number\">Mobile Number</label>\n                    <input \n                        type=\"tel\" \n                        pattern=\"[7-9]{1}[0-9]{9}\" \n                        name=\"number\"\n                        value={phoneNumber}\n                        required\n                        onChange={e => setPhoneNumber(e.target.value)}\n                    />\n                    <p className=\"form__error\">{phoneNumberError}</p>\n                </div>\n\n                <div className=\"form__inputs\">\n                    <label htmlFor=\"address__text\">Address</label>\n                    <textarea \n                        required\n                        className=\"address__text\"\n                        type=\"text\" \n                        maxLength= \"250\"\n                        name=\"address__text\"\n                        value={address}\n                        onChange={e => setAddress(e.target.value)}\n                    />\n                    <p className=\"form__error\">{addressError}</p>\n                </div>\n\n                <div className=\"form__inputs\">\n                    <label htmlFor=\"email\">Email Id</label>\n                    <input \n                        type=\"email\"\n                        name=\"email\"\n                        required\n                        value={email}\n                        onChange={e => setEmail(e.target.value)}\n                    />\n                    <p className=\"form__error\">{emailError}</p>\n                </div>\n\n                <button className=\"form__submit\" type=\"button\" onClick={handleSubmit}>\n                    Save\n                </button>\n\n            </form>\n\n        </div>\n    )\n}\n\nexport default AddContact\n","import React from 'react';\nimport './App.css';\nimport { HashRouter as Router, Route, Switch, Link } from \"react-router-dom\";\nimport Contacts from './components/Contacts';\nimport AddContact from './components/AddContact';\nimport Details from './components/Details';\n\nfunction App() {\n\n\treturn (\n\t\t<Router>\n\t\t\t<div className=\"App\">\n\t\t\t\t<header>\n\t\t\t\t\t<Link to=\"/\" className=\"App__header\">\n\t\t\t\t\t\t<h1>Contacts App</h1>\n\t\t\t\t\t</Link>\n\t\t\t\t</header>\n\t\t\t\t<Switch>\n\n\t\t\t\t\t<Route path=\"/\" exact>\n\t\t\t\t\t\t<Contacts />\n\t\t\t\t\t</Route>\n\t\t\t\t\t<Route path=\"/addcontact\" exact>\n\t\t\t\t\t\t<AddContact />\n\t\t\t\t\t</Route>\n\n\t\t\t\t</Switch>\n\t\t\t</div>\n\t\t</Router>\n\t)\n}\n\nexport default App","import { configureStore } from '@reduxjs/toolkit';\nimport contactsReducer from '../features/contactSlice.js';\n\nexport const store = configureStore({\n  reducer: {\n    contacts : contactsReducer\n  },\n});","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}